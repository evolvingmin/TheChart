using UnityEngine;
using System.Collections;
using System.Collections.Generic;

namespace C2TPro
{
	public class TableCodeGen
	{
		const string codeTemplate =
@"// This code automatically generated by TableCodeGen
using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System;
using C2TPro;

public $STATIC$ partial class $CLASS$
{
	public partial class Row
	{
$ROW_MEMBER_CODE$
	}

	$STATIC$ List<Row> rowList = new List<Row>();
	$STATIC$ bool isLoaded = false;

	public $STATIC$ bool IsLoaded()
	{
		return isLoaded;
	}

    public $STATIC$ void Clear()
    {   
        isLoaded = false;
        rowList.Clear();
    }

	public $STATIC$ List<Row> GetRowList()
	{
        $CALL_STATIC_LOAD$
		return rowList;
	}

	public $STATIC$ void Load(string csv)
	{
		rowList.Clear();
		string[][] grid = CsvParser.Parse(csv);
		for(int i = 1 ; i < grid.Length ; i++)
		{
			if(grid[i][0].StartsWith(""#""))
				continue;	// skip comment

			Row row = new Row();
$ROW_READ_CODE$
			rowList.Add(row);
		}
		isLoaded = true;
	}

$STATIC_LOAD_FUNCTION$

	public $STATIC$ int NumRows()
	{
        $CALL_STATIC_LOAD$
		return rowList.Count;
	}

	public $STATIC$ Row GetAt(int i)
	{
        $CALL_STATIC_LOAD$
		if(rowList.Count <= i)
			return null;
		return rowList[i];
	}

$FIND_CODE$
}";
        
        const string findCodeTemplate =
@"	public $STATIC$ Row Find_$COLUMN$($COLUMN_TYPE$ find)
	{
        $CALL_STATIC_LOAD$
		return rowList.Find(x => x.$COLUMN$ == find);
	}
	public $STATIC$ List<Row> FindAll_$COLUMN$($COLUMN_TYPE$ find)
	{
        $CALL_STATIC_LOAD$
		return rowList.FindAll(x => x.$COLUMN$ == find);
	}
";

        const string staticLoadFunctionCode =
@"	public static void StaticLoad()
	{
		if(!isLoaded) 
            Load(Resources.Load<TextAsset>(""$STATIC_CSV_PATH$"").text);
	}
";
        //	나중에 에셋번들 메니져 작성하면 이렇게 하도록 하자.	if(!isLoaded) 
        //   Load(AssetBundleManager.instance.Load<TextAsset>(""FBGame/Resources/$STATIC_CSV_PATH$"").text);
		public static string Generate(string csvText, string className)
		{
			return Generate(csvText, className, null);
		}

		public static string Generate(string csvText, string className, CSVMetaData meta)
		{
			if(string.IsNullOrEmpty(csvText))
				return null;
			
			string[][] grid = CsvParser.Parse(csvText);
			if(grid.Length < 1)
				return null;
			
			string rowMemberCode = "";
			string rowReadCode = "";
			string findCode = "";
			for(int i = 0 ; i < grid[0].Length ; i++)
			{
				string column = grid[0][i];
				string type = meta == null ? "string" : meta.GetColumnType(column);
				rowMemberCode += string.Format("\t\tpublic {0} {1};\n", type, column);
				switch(type)
				{
				case "string":
					rowReadCode += string.Format("\t\t\trow.{0} = grid[i][{1}];\n", column, i);
					break;

				case "int":
					rowReadCode += string.Format(
						"\t\t\trow.{0} = string.IsNullOrEmpty(grid[i][{1}]) ? 0 : Convert.ToInt32(grid[i][{1}]);\n", column, i);
					break;

				case "float":
					rowReadCode += string.Format(
						"\t\t\trow.{0} = string.IsNullOrEmpty(grid[i][{1}]) ? 0 : Convert.ToSingle(grid[i][{1}]);\n", column, i);
					break;

				case "bool":
					rowReadCode += string.Format(
						"\t\t\trow.{0} = string.IsNullOrEmpty(grid[i][{1}]) ? false : Convert.ToBoolean(grid[i][{1}]);\n", column, i);
					break;
                }
                findCode += findCodeTemplate.Replace("$COLUMN$", column).Replace("$COLUMN_TYPE$", type);
			}

            string code = codeTemplate;
			code = code.Replace("$CLASS$", className);
			code = code.Replace("$ROW_MEMBER_CODE$", rowMemberCode);
			code = code.Replace("$ROW_READ_CODE$", rowReadCode);
			code = code.Replace("$FIND_CODE$", findCode);
            code = code.Replace("$STATIC$", meta.isStatic ? "static" : "");
            code = code.Replace("$STATIC_LOAD_FUNCTION$", meta.isStatic ? staticLoadFunctionCode : "");
            code = code.Replace("$CALL_STATIC_LOAD$", meta.isStatic ? string.Format("StaticLoad();", meta.staticCsvPath) : "");
            code = code.Replace("$STATIC_CSV_PATH$", meta.isStatic ? meta.staticCsvPath : "");

            return code;
		}
	}
}