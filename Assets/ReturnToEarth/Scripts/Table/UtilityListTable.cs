// This code automatically generated by TableCodeGen
using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System;
using C2TPro;

public static partial class UtilityListTable
{
	public partial class Row
	{
		public int index;
		public string name;
		public int damage;
		public int attack_range;
		public int attackspeed;
		public int magazine;
		public int hp;
		public int avoid_rate;

	}

	static List<Row> rowList = new List<Row>();
	static bool isLoaded = false;

	public static bool IsLoaded()
	{
		return isLoaded;
	}

	public static List<Row> GetRowList()
	{
        StaticLoad();
		return rowList;
	}

	public static void Load(string csv)
	{
		rowList.Clear();
		string[][] grid = CsvParser.Parse(csv);
		for(int i = 1 ; i < grid.Length ; i++)
		{
			if(grid[i][0].StartsWith("#"))
				continue;	// skip comment

			Row row = new Row();
			row.index = string.IsNullOrEmpty(grid[i][0]) ? 0 : Convert.ToInt32(grid[i][0]);
			row.name = grid[i][1];
			row.damage = string.IsNullOrEmpty(grid[i][2]) ? 0 : Convert.ToInt32(grid[i][2]);
			row.attack_range = string.IsNullOrEmpty(grid[i][3]) ? 0 : Convert.ToInt32(grid[i][3]);
			row.attackspeed = string.IsNullOrEmpty(grid[i][4]) ? 0 : Convert.ToInt32(grid[i][4]);
			row.magazine = string.IsNullOrEmpty(grid[i][5]) ? 0 : Convert.ToInt32(grid[i][5]);
			row.hp = string.IsNullOrEmpty(grid[i][6]) ? 0 : Convert.ToInt32(grid[i][6]);
			row.avoid_rate = string.IsNullOrEmpty(grid[i][7]) ? 0 : Convert.ToInt32(grid[i][7]);

			rowList.Add(row);
		}
		isLoaded = true;
	}

	public static void StaticLoad()
	{
		if(!isLoaded) 
            Load(Resources.Load<TextAsset>("Table/UtilityList").text);
	}


	public static int NumRows()
	{
        StaticLoad();
		return rowList.Count;
	}

	public static Row GetAt(int i)
	{
        StaticLoad();
		if(rowList.Count <= i)
			return null;
		return rowList[i];
	}

	public static Row Find_index(int find)
	{
        StaticLoad();
		return rowList.Find(x => x.index == find);
	}
	public static List<Row> FindAll_index(int find)
	{
        StaticLoad();
		return rowList.FindAll(x => x.index == find);
	}
	public static Row Find_name(string find)
	{
        StaticLoad();
		return rowList.Find(x => x.name == find);
	}
	public static List<Row> FindAll_name(string find)
	{
        StaticLoad();
		return rowList.FindAll(x => x.name == find);
	}
	public static Row Find_damage(int find)
	{
        StaticLoad();
		return rowList.Find(x => x.damage == find);
	}
	public static List<Row> FindAll_damage(int find)
	{
        StaticLoad();
		return rowList.FindAll(x => x.damage == find);
	}
	public static Row Find_attack_range(int find)
	{
        StaticLoad();
		return rowList.Find(x => x.attack_range == find);
	}
	public static List<Row> FindAll_attack_range(int find)
	{
        StaticLoad();
		return rowList.FindAll(x => x.attack_range == find);
	}
	public static Row Find_attackspeed(int find)
	{
        StaticLoad();
		return rowList.Find(x => x.attackspeed == find);
	}
	public static List<Row> FindAll_attackspeed(int find)
	{
        StaticLoad();
		return rowList.FindAll(x => x.attackspeed == find);
	}
	public static Row Find_magazine(int find)
	{
        StaticLoad();
		return rowList.Find(x => x.magazine == find);
	}
	public static List<Row> FindAll_magazine(int find)
	{
        StaticLoad();
		return rowList.FindAll(x => x.magazine == find);
	}
	public static Row Find_hp(int find)
	{
        StaticLoad();
		return rowList.Find(x => x.hp == find);
	}
	public static List<Row> FindAll_hp(int find)
	{
        StaticLoad();
		return rowList.FindAll(x => x.hp == find);
	}
	public static Row Find_avoid_rate(int find)
	{
        StaticLoad();
		return rowList.Find(x => x.avoid_rate == find);
	}
	public static List<Row> FindAll_avoid_rate(int find)
	{
        StaticLoad();
		return rowList.FindAll(x => x.avoid_rate == find);
	}

}